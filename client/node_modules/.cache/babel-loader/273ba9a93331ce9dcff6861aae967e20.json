{"ast":null,"code":"import Auth from '../Auth';\nimport jumpTo from '../Navigation';\nimport axios from 'axios';\nimport qs from 'qs';\nimport paypalConfig from '../../configs/paypalConfig'; // const URL = 'http://localhost:4000'\n\nvar serverCall = function serverCall(config) {\n  //header authorization\n  if (Auth.user_token) {\n    var token = Auth.getToken();\n    config.headers = {\n      \"authorization\": token\n    };\n  } //interceptors handle network error\n\n\n  axios.interceptors.response.use(function (response) {\n    return response;\n  }, function (error) {\n    if (!error.response) {\n      error.response = {\n        data: 'net work error',\n        status: 500\n      };\n    }\n\n    if (error.response.status === 401) {\n      Auth.logout();\n      jumpTo('/login');\n      throw error;\n    }\n\n    return Promise.reject(error);\n  });\n  config.baseURL = URL;\n  return axios(config);\n};\n\nexport default serverCall;\nexport var login = function login(email, password) {\n  var body = {\n    \"credential\": {\n      \"email\": email,\n      \"password\": password\n    }\n  };\n  return serverCall({\n    method: 'POST',\n    url: '/users/login',\n    data: body\n  }).then(function (res) {\n    Auth.setUserToken(res.data.user_token);\n    return res;\n  });\n};\nexport var getPaypalToken = function getPaypalToken() {\n  return axios({\n    method: 'POST',\n    url: 'https://api.sandbox.paypal.com/v1/oauth2/token',\n    headers: {\n      'content-type': 'application/x-www-form-urlencoded'\n    },\n    auth: {\n      username: paypalConfig.username,\n      password: paypalConfig.password\n    },\n    data: qs.stringify({\n      \"grant_type\": \"client_credentials\"\n    })\n  });\n};","map":{"version":3,"sources":["C:\\Users\\rajni\\OneDrive\\Desktop\\BCS Notes\\Homework\\ReactApp\\client\\src\\modules\\serverCall\\index.js"],"names":["Auth","jumpTo","axios","qs","paypalConfig","serverCall","config","user_token","token","getToken","headers","interceptors","response","use","error","data","status","logout","Promise","reject","baseURL","URL","login","email","password","body","method","url","then","res","setUserToken","getPaypalToken","auth","username","stringify"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,SAAjB;AACA,OAAOC,MAAP,MAAmB,eAAnB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,EAAP,MAAe,IAAf;AACA,OAAOC,YAAP,MAAyB,4BAAzB,C,CAGA;;AAEA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,MAAD,EAAY;AAC7B;AACA,MAAIN,IAAI,CAACO,UAAT,EAAqB;AACnB,QAAMC,KAAK,GAAGR,IAAI,CAACS,QAAL,EAAd;AACAH,IAAAA,MAAM,CAACI,OAAP,GAAiB;AACf,uBAAiBF;AADF,KAAjB;AAGD,GAP4B,CAQ7B;;;AACAN,EAAAA,KAAK,CAACS,YAAN,CAAmBC,QAAnB,CAA4BC,GAA5B,CACE,UAACD,QAAD,EAAc;AACZ,WAAOA,QAAP;AACD,GAHH,EAIE,UAAUE,KAAV,EAAiB;AACf,QAAI,CAACA,KAAK,CAACF,QAAX,EAAqB;AACnBE,MAAAA,KAAK,CAACF,QAAN,GAAiB;AACfG,QAAAA,IAAI,EAAE,gBADS;AAEfC,QAAAA,MAAM,EAAE;AAFO,OAAjB;AAID;;AACD,QAAGF,KAAK,CAACF,QAAN,CAAeI,MAAf,KAAwB,GAA3B,EAA+B;AAC7BhB,MAAAA,IAAI,CAACiB,MAAL;AACAhB,MAAAA,MAAM,CAAC,QAAD,CAAN;AACA,YAAMa,KAAN;AACD;;AACD,WAAOI,OAAO,CAACC,MAAR,CAAeL,KAAf,CAAP;AACD,GAjBH;AAkBAR,EAAAA,MAAM,CAACc,OAAP,GAAiBC,GAAjB;AACA,SAAOnB,KAAK,CAACI,MAAD,CAAZ;AACD,CA7BD;;AA8BA,eAAeD,UAAf;AAEA,OAAO,IAAMiB,KAAK,GAAG,SAARA,KAAQ,CAACC,KAAD,EAAQC,QAAR,EAAqB;AACxC,MAAMC,IAAI,GACV;AACE,kBAAc;AACZ,eAASF,KADG;AAEZ,kBAAYC;AAFA;AADhB,GADA;AAOA,SAAOnB,UAAU,CAAC;AAChBqB,IAAAA,MAAM,EAAE,MADQ;AAEhBC,IAAAA,GAAG,EAAE,cAFW;AAGhBZ,IAAAA,IAAI,EAAEU;AAHU,GAAD,CAAV,CAKJG,IALI,CAKC,UAAAC,GAAG,EAAI;AACX7B,IAAAA,IAAI,CAAC8B,YAAL,CAAkBD,GAAG,CAACd,IAAJ,CAASR,UAA3B;AACA,WAAOsB,GAAP;AACD,GARI,CAAP;AASD,CAjBM;AAmBP,OAAO,IAAME,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AAClC,SAAO7B,KAAK,CAAC;AACXwB,IAAAA,MAAM,EAAE,MADG;AAEXC,IAAAA,GAAG,EAAE,gDAFM;AAGXjB,IAAAA,OAAO,EAAE;AAAE,sBAAgB;AAAlB,KAHE;AAIXsB,IAAAA,IAAI,EAAE;AACJC,MAAAA,QAAQ,EAAE7B,YAAY,CAAC6B,QADnB;AAEJT,MAAAA,QAAQ,EAAEpB,YAAY,CAACoB;AAFnB,KAJK;AAQXT,IAAAA,IAAI,EAAEZ,EAAE,CAAC+B,SAAH,CAAa;AAAE,oBAAc;AAAhB,KAAb;AARK,GAAD,CAAZ;AAUD,CAXM","sourcesContent":["import Auth from '../Auth'\nimport jumpTo from '../Navigation'\nimport axios from 'axios'\nimport qs from 'qs'\nimport paypalConfig from '../../configs/paypalConfig'\n\n\n// const URL = 'http://localhost:4000'\n\nconst serverCall = (config) => {\n  //header authorization\n  if (Auth.user_token) {\n    const token = Auth.getToken()\n    config.headers = {\n      \"authorization\": token\n    }\n  }\n  //interceptors handle network error\n  axios.interceptors.response.use(\n    (response) => {\n      return response;\n    },\n    function (error) {\n      if (!error.response) {\n        error.response = {\n          data: 'net work error',\n          status: 500\n        }\n      }\n      if(error.response.status===401){\n        Auth.logout()\n        jumpTo('/login')\n        throw error\n      }\n      return Promise.reject(error);\n    });\n  config.baseURL = URL\n  return axios(config)\n}\nexport default serverCall\n\nexport const login = (email, password) => {\n  const body =\n  {\n    \"credential\": {\n      \"email\": email,\n      \"password\": password\n    }\n  }\n  return serverCall({\n    method: 'POST',\n    url: '/users/login',\n    data: body\n  })\n    .then(res => {\n      Auth.setUserToken(res.data.user_token)\n      return res\n    })\n}\n\nexport const getPaypalToken = () => {\n  return axios({\n    method: 'POST',\n    url: 'https://api.sandbox.paypal.com/v1/oauth2/token',\n    headers: { 'content-type': 'application/x-www-form-urlencoded' },\n    auth: {\n      username: paypalConfig.username,\n      password: paypalConfig.password\n    },\n    data: qs.stringify({ \"grant_type\": \"client_credentials\" })\n  })\n}"]},"metadata":{},"sourceType":"module"}