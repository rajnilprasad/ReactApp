{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\rajni\\\\OneDrive\\\\Desktop\\\\Shopping-App\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\rajni\\\\OneDrive\\\\Desktop\\\\Shopping-App\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\n\nvar Validation =\n/*#__PURE__*/\nfunction () {\n  function Validation(assertion, rule, errMsg) {\n    _classCallCheck(this, Validation);\n\n    this.assertion = assertion;\n    this.rule = rule;\n    this.errMsg = errMsg;\n  }\n\n  _createClass(Validation, [{\n    key: \"check\",\n    value: function check(text) {\n      return this.rule(text);\n    }\n  }, {\n    key: \"errMsg\",\n    value: function errMsg() {\n      return this.errMsg;\n    }\n  }]);\n\n  return Validation;\n}();\n\nexport var validateExistence = new Validation('input should have value', function (text) {\n  return /\\S/.test(text);\n}, 'Required');\nexport var validateEmail = new Validation('input should be an email', function (text) {\n  return !!text.match(/[\\w-]+@([\\w-]+\\.)+[\\w-]+/i);\n}, 'invalid email');\nexport var validateLength = function validateLength(min_len, max_len) {\n  var regex = new RegExp(\"(?=.{\".concat(min_len, \",\").concat(max_len, \"})\"), 'g');\n  return new Validation('input should within certain length', function (text) {\n    return !!text.match(regex);\n  }, \"password has to be \".concat(min_len, \"-\").concat(max_len, \" letter\"));\n};\nexport var validateLowerCase = new Validation('input should have an uppercase', function (text) {\n  return !!text.match(/(?=.*[A-Z])/g);\n}, 'at least one upper case');\nexport var validateUpperCase = new Validation('input should have lowercase', function (text) {\n  return !!text.match(/(?=.*[a-z])/g);\n}, 'at least one lower case');","map":{"version":3,"sources":["C:\\Users\\rajni\\OneDrive\\Desktop\\Shopping-App\\client\\src\\pages\\loginsignin\\utils\\validation.js"],"names":["Validation","assertion","rule","errMsg","text","validateExistence","test","validateEmail","match","validateLength","min_len","max_len","regex","RegExp","validateLowerCase","validateUpperCase"],"mappings":";;;IAAMA,U;;;AACJ,sBAAYC,SAAZ,EAAuBC,IAAvB,EAA6BC,MAA7B,EAAqC;AAAA;;AACnC,SAAKF,SAAL,GAAiBA,SAAjB;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACA,SAAKC,MAAL,GAAcA,MAAd;AACD;;;;0BACKC,I,EAAM;AACV,aAAO,KAAKF,IAAL,CAAUE,IAAV,CAAP;AACD;;;6BACQ;AACP,aAAO,KAAKD,MAAZ;AACD;;;;;;AAGH,OAAO,IAAME,iBAAiB,GAAG,IAAIL,UAAJ,CAC/B,yBAD+B,EAE/B,UAAAI,IAAI;AAAA,SAAI,KAAKE,IAAL,CAAUF,IAAV,CAAJ;AAAA,CAF2B,EAG/B,UAH+B,CAA1B;AAKP,OAAO,IAAMG,aAAa,GAAG,IAAIP,UAAJ,CAC3B,0BAD2B,EAE3B,UAAAI,IAAI;AAAA,SAAI,CAAC,CAACA,IAAI,CAACI,KAAL,CAAW,2BAAX,CAAN;AAAA,CAFuB,EAG3B,eAH2B,CAAtB;AAKP,OAAO,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,OAAD,EAAUC,OAAV,EAAsB;AAClD,MAAMC,KAAK,GAAG,IAAIC,MAAJ,gBAAmBH,OAAnB,cAA8BC,OAA9B,SAA2C,GAA3C,CAAd;AACA,SAAO,IAAIX,UAAJ,CACL,oCADK,EAEL,UAAAI,IAAI;AAAA,WAAI,CAAC,CAACA,IAAI,CAACI,KAAL,CAAWI,KAAX,CAAN;AAAA,GAFC,+BAGiBF,OAHjB,cAG4BC,OAH5B,aAAP;AAKD,CAPM;AAQP,OAAO,IAAMG,iBAAiB,GAAG,IAAId,UAAJ,CAC/B,gCAD+B,EAE/B,UAAAI,IAAI;AAAA,SAAI,CAAC,CAACA,IAAI,CAACI,KAAL,CAAW,cAAX,CAAN;AAAA,CAF2B,EAG/B,yBAH+B,CAA1B;AAKP,OAAO,IAAMO,iBAAiB,GAAG,IAAIf,UAAJ,CAC/B,6BAD+B,EAE/B,UAAAI,IAAI;AAAA,SAAI,CAAC,CAACA,IAAI,CAACI,KAAL,CAAW,cAAX,CAAN;AAAA,CAF2B,EAG/B,yBAH+B,CAA1B","sourcesContent":["class Validation {\n  constructor(assertion, rule, errMsg) {\n    this.assertion = assertion\n    this.rule = rule\n    this.errMsg = errMsg\n  }\n  check(text) {\n    return this.rule(text)\n  }\n  errMsg() {\n    return this.errMsg\n  }\n}\n\nexport const validateExistence = new Validation(\n  'input should have value',\n  text => /\\S/.test(text),\n  'Required'\n)\nexport const validateEmail = new Validation(\n  'input should be an email',\n  text => !!text.match(/[\\w-]+@([\\w-]+\\.)+[\\w-]+/i),\n  'invalid email'\n)\nexport const validateLength = (min_len, max_len) => {\n  const regex = new RegExp(`(?=.{${min_len},${max_len}})`, 'g')\n  return new Validation(\n    'input should within certain length',\n    text => !!text.match(regex),\n    `password has to be ${min_len}-${max_len} letter`\n  )\n}\nexport const validateLowerCase = new Validation(\n  'input should have an uppercase',\n  text => !!text.match(/(?=.*[A-Z])/g),\n  'at least one upper case'\n)\nexport const validateUpperCase = new Validation(\n  'input should have lowercase',\n  text => !!text.match(/(?=.*[a-z])/g),\n  'at least one lower case'\n)"]},"metadata":{},"sourceType":"module"}